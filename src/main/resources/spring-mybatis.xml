<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd




        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="lxk.dao" />
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="lxk.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>


    <!--问题描述: 在接口应用MethodValidationPostProcessor和Spring注解式事务后发现： 验证参数之前就先开启了事务(获得了DB连接)，应该先验证输入，验证失败后直接抛出异常，验证成功再开启事务，这样对业务层的性能才更好。-->
    <!--第一种解决方式：-->
    <!--可以修改它们的order来完成；不能使用tx:ann…… 注册 ，手工注册相应的bean指定order即可.如果使用注解bean就懵逼了.还好Spring 4.2 利用@Order控制配置类的加载顺序.可以参考如下:http://wiselyman.iteye.com/blog/2217192-->
    <!--&lt;!&ndash; 这个标签上可以写order，默认是Integer.MAX_VALUE &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <!--&lt;!&ndash; 其他配置项配置 &ndash;&gt;-->
    <!--<bean id="validator" class="com.gmail.dohongdayi.ssh.common.validation.ValidatorFactoryBean">-->
    <!--<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />-->
    <!--&lt;!&ndash; 如果不加默认到 使用classpath下的 ValidationMessages.properties-->
    <!--<property name="validationMessageSource" ref="messageSource" /> &ndash;&gt;-->
    <!--</bean>-->
    <!--&lt;!&ndash; 定义切入点 &ndash;&gt;-->
    <!--<bean id="validationPointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut">-->
    <!--<constructor-arg index="0" value="org.springframework.validation.annotation.Validated" />-->
    <!--<constructor-arg index="1" value="true" />-->
    <!--</bean>-->
    <!--&lt;!&ndash;  定义通知&ndash;&gt;-->
    <!--<bean id="validationAdvice" class="org.springframework.validation.beanvalidation.MethodValidationInterceptor">-->
    <!--<constructor-arg index="0" ref="validator" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 替代MethodValidationPostProcessor，让验证切面的advisor加入到Spring AOP的AspectJAwareAdvisorAutoProxyCreator的advised &ndash;&gt;-->
    <!--<aop:config>-->
    <!--&lt;!&ndash; 通过order指定验证优先于事务(100 < Integer.MAX_VALUE) &ndash;&gt;-->
    <!--<aop:advisor pointcut-ref="validationPointcut" advice-ref="validationAdvice" order="100" />-->
    <!--</aop:config>-->
</beans>
